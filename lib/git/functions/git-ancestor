#!/bin/bash

#
# Returns the path of the most recent ancestor branch on upstream. Optionally
# excludes an input regex.
#
# Matching with upstream/master branch is weighted the most. Otherwise, matching
# is done in lexicographically.
#

# abort if not in git directory
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  echo "Aborting. Not in a git repository."
  exit 1
fi

# only exclude input regex from matches
exclusion="$1"
if [ -z "$exclusion" ]; then
  exclusion="*"
fi

base_remote="upstream"
if [ -z "$(git remote | grep upstream)" ]; then
  base_remote="origin"
fi

# backtrack at most 500 commits looking for the most recent ancestor branch
# on upstream
index=1
while [ $index -lt 500 ]; do
  # ensure HEAD~$index exists
  git cat-file -e HEAD~$index 2>/dev/null
  if [ $? -ne 0 ]; then break; fi

  # use upstream/master as ancestor with highest priority
  if [ "$(git branch --remote --contains HEAD~$index | grep "$base_remote/master")" ]; then
    path="$base_remote/master"
  fi

  if [ -z "$path" ]; then
    # determine if the current ancestor commit belongs to a qualified
    # remote branch
    #   * search remote branches containing the current ancestor commit
    #   * potentially exclude input regex from matches
    #   * filter by commits on $base_remote (upstream)
    #   * filter out upstream/HEAD branch
    #   * select the first match
    path="$(
      git branch --remote --contains HEAD~$index |
      grep -v "$exclusion" |
      grep $base_remote |
      sed /HEAD/d |
      head -n 1 |
      sed 's/[ ]*//'
    )"
  fi

  # break out of the loop if any matches are found
  if [ "$path" ]; then
    break
  fi

  # iterate back one commit
  let index+=1
done

# return the description (remote/branch) of the most recent ancestor on upstream
echo $path
